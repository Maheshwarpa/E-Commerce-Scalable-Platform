// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: OrderService/orders.proto

package orders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderServices_ValidateOrder_FullMethodName         = "/OrderService.OrderServices/ValidateOrder"
	OrderServices_OrderCreatedEvent_FullMethodName     = "/OrderService.OrderServices/OrderCreatedEvent"
	OrderServices_PaymentProcessedEvent_FullMethodName = "/OrderService.OrderServices/PaymentProcessedEvent"
)

// OrderServicesClient is the client API for OrderServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServicesClient interface {
	ValidateOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*CompleteO, error)
	OrderCreatedEvent(ctx context.Context, in *CompleteO, opts ...grpc.CallOption) (*OrderR, error)
	PaymentProcessedEvent(ctx context.Context, in *OrderR, opts ...grpc.CallOption) (*OrderR, error)
}

type orderServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServicesClient(cc grpc.ClientConnInterface) OrderServicesClient {
	return &orderServicesClient{cc}
}

func (c *orderServicesClient) ValidateOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*CompleteO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteO)
	err := c.cc.Invoke(ctx, OrderServices_ValidateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServicesClient) OrderCreatedEvent(ctx context.Context, in *CompleteO, opts ...grpc.CallOption) (*OrderR, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderR)
	err := c.cc.Invoke(ctx, OrderServices_OrderCreatedEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServicesClient) PaymentProcessedEvent(ctx context.Context, in *OrderR, opts ...grpc.CallOption) (*OrderR, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderR)
	err := c.cc.Invoke(ctx, OrderServices_PaymentProcessedEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServicesServer is the server API for OrderServices service.
// All implementations must embed UnimplementedOrderServicesServer
// for forward compatibility.
type OrderServicesServer interface {
	ValidateOrder(context.Context, *OrderReq) (*CompleteO, error)
	OrderCreatedEvent(context.Context, *CompleteO) (*OrderR, error)
	PaymentProcessedEvent(context.Context, *OrderR) (*OrderR, error)
	mustEmbedUnimplementedOrderServicesServer()
}

// UnimplementedOrderServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServicesServer struct{}

func (UnimplementedOrderServicesServer) ValidateOrder(context.Context, *OrderReq) (*CompleteO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrder not implemented")
}
func (UnimplementedOrderServicesServer) OrderCreatedEvent(context.Context, *CompleteO) (*OrderR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCreatedEvent not implemented")
}
func (UnimplementedOrderServicesServer) PaymentProcessedEvent(context.Context, *OrderR) (*OrderR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentProcessedEvent not implemented")
}
func (UnimplementedOrderServicesServer) mustEmbedUnimplementedOrderServicesServer() {}
func (UnimplementedOrderServicesServer) testEmbeddedByValue()                       {}

// UnsafeOrderServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServicesServer will
// result in compilation errors.
type UnsafeOrderServicesServer interface {
	mustEmbedUnimplementedOrderServicesServer()
}

func RegisterOrderServicesServer(s grpc.ServiceRegistrar, srv OrderServicesServer) {
	// If the following call pancis, it indicates UnimplementedOrderServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderServices_ServiceDesc, srv)
}

func _OrderServices_ValidateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServicesServer).ValidateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderServices_ValidateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServicesServer).ValidateOrder(ctx, req.(*OrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderServices_OrderCreatedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServicesServer).OrderCreatedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderServices_OrderCreatedEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServicesServer).OrderCreatedEvent(ctx, req.(*CompleteO))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderServices_PaymentProcessedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServicesServer).PaymentProcessedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderServices_PaymentProcessedEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServicesServer).PaymentProcessedEvent(ctx, req.(*OrderR))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderServices_ServiceDesc is the grpc.ServiceDesc for OrderServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService.OrderServices",
	HandlerType: (*OrderServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateOrder",
			Handler:    _OrderServices_ValidateOrder_Handler,
		},
		{
			MethodName: "OrderCreatedEvent",
			Handler:    _OrderServices_OrderCreatedEvent_Handler,
		},
		{
			MethodName: "PaymentProcessedEvent",
			Handler:    _OrderServices_PaymentProcessedEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "OrderService/orders.proto",
}
