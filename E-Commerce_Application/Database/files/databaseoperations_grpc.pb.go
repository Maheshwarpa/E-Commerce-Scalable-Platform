// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: Database/databaseoperations.proto

package files

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseService_CheckLoginCredentials_FullMethodName = "/Database.DatabaseService/CheckLoginCredentials"
	DatabaseService_LoadLoginCred_FullMethodName         = "/Database.DatabaseService/LoadLoginCred"
	DatabaseService_GetAllLoginCred_FullMethodName       = "/Database.DatabaseService/GetAllLoginCred"
	DatabaseService_GetAllUserData_FullMethodName        = "/Database.DatabaseService/GetAllUserData"
	DatabaseService_GetUserByUserDetails_FullMethodName  = "/Database.DatabaseService/GetUserByUserDetails"
)

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseServiceClient interface {
	CheckLoginCredentials(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Empty, error)
	LoadLoginCred(ctx context.Context, in *LoginCredRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAllLoginCred(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LoginCredList, error)
	GetAllUserData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserDetailsList, error)
	GetUserByUserDetails(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserDetails, error)
}

type databaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseServiceClient(cc grpc.ClientConnInterface) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) CheckLoginCredentials(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DatabaseService_CheckLoginCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) LoadLoginCred(ctx context.Context, in *LoginCredRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, DatabaseService_LoadLoginCred_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetAllLoginCred(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LoginCredList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginCredList)
	err := c.cc.Invoke(ctx, DatabaseService_GetAllLoginCred_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetAllUserData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserDetailsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDetailsList)
	err := c.cc.Invoke(ctx, DatabaseService_GetAllUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetUserByUserDetails(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDetails)
	err := c.cc.Invoke(ctx, DatabaseService_GetUserByUserDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
// All implementations must embed UnimplementedDatabaseServiceServer
// for forward compatibility.
type DatabaseServiceServer interface {
	CheckLoginCredentials(context.Context, *LoginRequest) (*Empty, error)
	LoadLoginCred(context.Context, *LoginCredRequest) (*Empty, error)
	GetAllLoginCred(context.Context, *Empty) (*LoginCredList, error)
	GetAllUserData(context.Context, *Empty) (*UserDetailsList, error)
	GetUserByUserDetails(context.Context, *UserRequest) (*UserDetails, error)
	mustEmbedUnimplementedDatabaseServiceServer()
}

// UnimplementedDatabaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseServiceServer struct{}

func (UnimplementedDatabaseServiceServer) CheckLoginCredentials(context.Context, *LoginRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginCredentials not implemented")
}
func (UnimplementedDatabaseServiceServer) LoadLoginCred(context.Context, *LoginCredRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadLoginCred not implemented")
}
func (UnimplementedDatabaseServiceServer) GetAllLoginCred(context.Context, *Empty) (*LoginCredList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLoginCred not implemented")
}
func (UnimplementedDatabaseServiceServer) GetAllUserData(context.Context, *Empty) (*UserDetailsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserData not implemented")
}
func (UnimplementedDatabaseServiceServer) GetUserByUserDetails(context.Context, *UserRequest) (*UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUserDetails not implemented")
}
func (UnimplementedDatabaseServiceServer) mustEmbedUnimplementedDatabaseServiceServer() {}
func (UnimplementedDatabaseServiceServer) testEmbeddedByValue()                         {}

// UnsafeDatabaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServiceServer will
// result in compilation errors.
type UnsafeDatabaseServiceServer interface {
	mustEmbedUnimplementedDatabaseServiceServer()
}

func RegisterDatabaseServiceServer(s grpc.ServiceRegistrar, srv DatabaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseService_ServiceDesc, srv)
}

func _DatabaseService_CheckLoginCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CheckLoginCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CheckLoginCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CheckLoginCredentials(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_LoadLoginCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).LoadLoginCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_LoadLoginCred_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).LoadLoginCred(ctx, req.(*LoginCredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetAllLoginCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetAllLoginCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetAllLoginCred_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetAllLoginCred(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetAllUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetAllUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetAllUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetAllUserData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetUserByUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetUserByUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetUserByUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetUserByUserDetails(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseService_ServiceDesc is the grpc.ServiceDesc for DatabaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Database.DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckLoginCredentials",
			Handler:    _DatabaseService_CheckLoginCredentials_Handler,
		},
		{
			MethodName: "LoadLoginCred",
			Handler:    _DatabaseService_LoadLoginCred_Handler,
		},
		{
			MethodName: "GetAllLoginCred",
			Handler:    _DatabaseService_GetAllLoginCred_Handler,
		},
		{
			MethodName: "GetAllUserData",
			Handler:    _DatabaseService_GetAllUserData_Handler,
		},
		{
			MethodName: "GetUserByUserDetails",
			Handler:    _DatabaseService_GetUserByUserDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Database/databaseoperations.proto",
}
